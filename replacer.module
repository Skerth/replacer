<?php

/**
 * Implements hook_menu().
 */
function replacer_menu() {
  $items = array();

  $items['admin/config/content/replacer'] = array(
    'title' => 'Replacer',
    'description' => 'Выполняет замены на странице',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('replacer_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Form of settings where you can change the replacements.
 *
 * @param $form
 *
 * @return mixed
 */
function replacer_config_form($form) {
  $replacers = variable_get('replacer_config', NULL);

  if ($replacers) {
    $replacers = _converting_to_string_replacers(variable_get('replacer_config'));
  }

  $form['replacer_config'] = array(
    '#type' => 'textarea',
    '#title' => t('Replacements'),
    '#description' => t("Введите каждый заменитель с новой строчки, разделяя атрибуты вертикальной чертой |"),
    '#default_value' => $replacers,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  return $form;
}

/**
 * Module configuration form handler.
 *
 * @param $form
 * @param $form_state
 */
function replacer_config_form_submit($form, &$form_state) {
  $replacers = $form_state['values']['replacer_config'];

  if ($replacers != '') {
    $replacers = _converting_to_array_replacers($replacers);
  }

  variable_set('replacer_config', $replacers);
}

/**
 * Implements hook_process_HOOK().
 *
 * @param $vars
 */
function replacer_process_html(&$vars) {
  $replacers = variable_get('replacer_config', '');

  if (!path_is_admin(current_path()) && $replacers != '') {
    foreach ($replacers as $replace) {
      $content = NULL;
      $args = array();

      if (mb_strpos($vars['page'], $replace[0])) {
        switch ($replace[1]) {
          case 'text':
            $content = $replace[2];
            break;

          case 'variable':
            $content = _replacer_get_variable($replace[2]);
            break;

          case 'function':
            $args = array($replace[2]);
            if (!empty($replace[3])) {
              $args = array_merge($args, explode(':', $replace[3]));
            }
            $content = call_user_func_array("_replacer_get_function", $args);
            break;

          case 'block':
            $args = array($replace[2], $replace[3]);

            if (!empty($replace[4])) {
              array_push($args, $replace[4]);
            }

            $content = call_user_func_array("_replacer_get_block", $args);
            break;

          case 'views':
            $args = array($replace[2], $replace[3]);

            if (!empty($replace[4])) {
              $args = array_merge($args, explode(':', $replace[4]));
            }

            $content = call_user_func_array("_replacer_get_views", $args);
            break;
        }

        $vars['page'] = str_replace(
          $replace[0],
          $content,
          $vars['page']
        );
      }
    }
  }
}

/**
 * @param $string_replacers
 *
 * @return array
 */
function _converting_to_array_replacers($string_replacers) {
  $replacers = explode(PHP_EOL, $string_replacers);

  foreach($replacers as &$replace) {
    $replace = trim($replace);
    $replace = explode('|', $replace);
  }

  return $replacers;
}

/**
 * @param $array_replacers
 *
 * @return string
 */
function _converting_to_string_replacers($array_replacers) {
  foreach($array_replacers as &$replace) {
    $replace = implode('|', $replace);
  }

  $replacers = implode(PHP_EOL, $array_replacers);

  return $replacers;
}

/**
 * @param $var_name
 *
 * @return mixed|null
 */
function _replacer_get_variable($var_name) {
  $content = variable_get($var_name, '');
  if (is_array($content)) {
    $content = var_export($content, true);
  }

  return $content;
}

function _replacer_get_function($function_name) {
  $args = func_get_args();
  unset($args[0]);
  return call_user_func_array($function_name, $args);
}

/**
 * Строка в конфиге должна быть tag|block|block_delta|block_view, где:
 *   block_delta:
 *     ID блока в системе
 *   block_view:
 *     'full' - для полного отображения блока
 *     'content' - для отображения содержимого блока
 *
 * Например: {{hot_prices}}|block|block|5|content
 * Заменит тег {{hot_prices}} на содержимое блока, имеющий ID 5
 *
 * @param $module
 * @param $delta
 * @param string $block_view :
 *   'full' - полное отображение
 *   'content' - отображение содержимого
 *
 * @return string
 */
function _replacer_get_block($module, $delta, $block_view = 'full') {
  $block = block_load($module, $delta);
  $blocks = _block_render_blocks(array($block));
  $blocks_build = _block_get_renderable_array($blocks);

  if ($block_view == 'content') {
    unset($blocks_build['block_' . $delta]['#theme_wrappers']);
  }

  return drupal_render($blocks_build);
}

function _replacer_get_views($name, $display_id) {
  $args = func_get_args();

  return call_user_func_array('views_embed_view', $args);
}
